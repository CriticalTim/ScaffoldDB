@page "/"
@*@inject DatabaseSchemaService SchemaService*@
@inject RuntimeScaffoldService rss

<h3>Database Schema Viewer</h3>

<div class="form-container">
    <h4>Connection Settings</h4>

    <div class="form-group">
        <label for="Server">Server:</label>
        <input id="Server" @bind="Server" type="text" placeholder="Enter server name" />
    </div>
    <div class="form-group">
        <label for="Database">Database:</label>
        <input id="Database" @bind="Database" type="text" placeholder="Enter database name" />
    </div>
    <div class="form-group">
        <label for="SQLLogin">SQL-Login</label>
        <input id="SQLLogin" @bind="SQLLogin" type="checkbox" />
    </div>
    @if (SQLLogin)
    {
        <div class="form-group">
            <label for="login">Login:</label>
            <input id="login" @bind="login" type="text" placeholder="Enter Login name" />
        </div>
        <div class="form-group">
            <label for="Password">Password:</label>
            <input id="Password" @bind="password" type="text" placeholder="Enter Password" />
        </div>
    }
    <div class="form-group">
        <label for="Trusted_Connection">Trusted Connection:</label>
        <input id="Trusted_Connection" @bind="Trusted_Connection" type="checkbox" />
    </div>
    <div class="form-group">
        <label for="MultipleActiveResultSets">Multiple Active Result Sets:</label>
        <input id="MultipleActiveResultSets" @bind="MultipleActiveResultSets" type="checkbox" />
    </div>
    <div class="form-actions">
        <button class="btn btn-primary" @onclick="LoadSchema">Load Schema</button>
    </div>

</div>

@if (IsLoading)
{
    <p>Loading...</p>
}
else if (!IsLoading && schemaTableInfosUI.Any())
{
    <div class="form-container">

        <h4>Database Tables</h4>
        @foreach (var info in schemaTableInfosUI)
        {
            <div>

                <table border="1">
                    <thead>
                        <tr>
                            <th>Schema</th>
                            <th>Table</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var tableName in info.TableNames)
                        {
                            <tr>
                                <td>@info.SchemaName</td>
                                <td>@tableName</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
}
else if (!string.IsNullOrEmpty(ErrorMessage) && !ErrorMessage.Contains("Success"))
{
    <div class="form-container">
        <p style="color: red;">@ErrorMessage</p>
    </div>

}
else if (!string.IsNullOrEmpty(ErrorMessage) && ErrorMessage.Contains("Success"))
{
    <div class="form-container">
        <p style="color: green;">@ErrorMessage</p>
    </div>

}

@if (tickMigrating)
{
    <div class="form-container">
        <h4>Connection Settings to Migration Server</h4>

        <div class="form-group">
            <label for="Server">Server:</label>
            <input id="Server" @bind="Server2" type="text" placeholder="Enter server name" />
        </div>
        <div class="form-group">
            <label for="Database">Database:</label>
            <input id="Database" @bind="Database2" type="text" placeholder="Enter database name" />
        </div>
        <div class="form-group">
            <label for="SQLLogin">SQL-Login</label>
            <input id="SQLLogin" @bind="SQLLogin2" type="checkbox" />
        </div>
        @if (SQLLogin2)
        {
            <div class="form-group">
                <label for="login">Login:</label>
                <input id="login" @bind="login2" type="text" placeholder="Enter Login name" />
            </div>
            <div class="form-group">
                <label for="Password">Password:</label>
                <input id="Password" @bind="password2" type="text" placeholder="Enter Password" />
            </div>
        }
        <div class="form-group">
            <label for="Trusted_Connection">Trusted Connection:</label>
            <input id="Trusted_Connection" @bind="Trusted_Connection2" type="checkbox" />
        </div>
        <div class="form-group">
            <label for="MultipleActiveResultSets">Multiple Active Result Sets:</label>
            <input id="MultipleActiveResultSets" @bind="MultipleActiveResultSets2" type="checkbox" />
        </div>
        <div class="form-actions">
            <div class="row">
                @if (!MigrationDeleted)
                {
                    <div class="col-md-6">
                        <button class="btn btn-primary" @onclick="DoMigration">Migrate Database Structure</button>
                    </div>
                }
                <div class="col-md-6">
                    <button class="btn btn-primary" @onclick="DeleteMigrationFiles">Delete Migration Files</button>
                </div>
            </div>

        </div>
    </div>
}

@code {
    private string ConnectionString { get; set; }
    private string ConnectionStringLogin { get; set; }
    private List<string> Tables { get; set; } = new();
    List<SchemaTableInfo> schemaTableInfosUI = new List<SchemaTableInfo>();
    private string ErrorMessage { get; set; } = "";
    private bool IsLoading { get; set; } = false;
    private bool MigrationDeleted { get; set; } = false;

    private string Server { get; set; } = "(localdb)\\mssqllocaldb";
    private string Database { get; set; } = "MachineLearningMachine3000";
    private string login { get; set; } = "";
    private string password { get; set; } = "";
    private bool SQLLogin { get; set; } = false;
    private string Trusted_Connection { get; set; } = "True";
    private string MultipleActiveResultSets { get; set; } = "True";

    private string Server2 { get; set; } = "(localdb)\\mssqllocaldb";
    private string Database2 { get; set; } = "MachineLearningMachine3000";
    private string login2 { get; set; } = "";
    private string password2 { get; set; } = "";
    private bool SQLLogin2 { get; set; } = false;
    private string Trusted_Connection2 { get; set; } = "True";
    private string MultipleActiveResultSets2 { get; set; } = "True";

    private bool tickMigrating { get; set; } = false;


    private async Task LoadSchema()
    {
        IsLoading = true;
        ErrorMessage = "";
        Tables.Clear();

        ConnectionString = string.Format($"Server={Server};Database={Database};Trusted_Connection={Trusted_Connection};MultipleActiveResultSets={MultipleActiveResultSets}");
        if (SQLLogin)
        {
            ConnectionStringLogin = string.Format($"Server={Server};Database={Database};User Id={login};Password={password};Trusted_Connection={Trusted_Connection};MultipleActiveResultSets={MultipleActiveResultSets}");
        }


        try
        {
            schemaTableInfosUI = rss.GetZeData(ConnectionString, Database);
            if (!schemaTableInfosUI.Any())
            {
                ErrorMessage = "Scaffolding Failed! Connectionstring incorrect.";
            }
            tickMigrating = true;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to load schema: {ex.Message}";
        }
        
        MigrationDeleted = false;
        IsLoading = false;
    }

    private async Task DoMigration()
    {
        ConnectionString = string.Format($"Server={Server2};Database={Database2};Trusted_Connection={Trusted_Connection2};MultipleActiveResultSets={MultipleActiveResultSets2}");
        if (SQLLogin2)
        {
            ConnectionStringLogin = string.Format($"Server={Server2};Database={Database2};User Id={login2};Password={password2};Trusted_Connection={Trusted_Connection2};MultipleActiveResultSets={MultipleActiveResultSets2}");
        }

        try
        {
            schemaTableInfosUI = rss.GetZeData(ConnectionString, Database, true);
            if (!schemaTableInfosUI.Any())
            {
                ErrorMessage = "Scaffolding Failed! Connectionstring incorrect.";
            }
            ErrorMessage = "Migration Success!";
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to load schema: {ex.Message}";
        }


    }

    private async Task DeleteMigrationFiles()
    {
        string appDataLocal = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);

        string tempDirectory = Path.Combine(appDataLocal, "Migrations");
        if (Directory.Exists(tempDirectory))
        {
            foreach (var file in Directory.GetFiles(tempDirectory))
            {
                File.Delete(file);
            }

            foreach (var subDir in Directory.GetDirectories(tempDirectory))
            {
                Directory.Delete(subDir, true);
            }
        }

        MigrationDeleted = true;
    }
}
<style>
    /* Form Container Styling */
    .form-container {
        padding: 20px;
        max-width: 500px;
        margin: 0 auto;
        background: #1e2a39;
        border-radius: 10px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
        margin-bottom: 2vh;
        color: #fff;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

        .form-container h4 {
            color: #00d8ff;
            margin-bottom: 20px;
            text-align: center;
        }

    /* Form Group Styling */
    .form-group {
        margin-bottom: 15px;
    }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

        .form-group input[type="text"] {
            width: 100%;
            padding: 10px;
            border: 1px solid #00d8ff;
            border-radius: 5px;
            background: #1e2a39;
            color: #fff;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            transition: border-color 0.3s, box-shadow 0.3s;
        }

            .form-group input[type="text"]:focus {
                outline: none;
                border-color: #66ffcc;
                box-shadow: 0 0 10px #66ffcc;
            }

        .form-group input[type="checkbox"] {
            transform: scale(1.2);
            margin-right: 10px;
        }

    /* Form Actions Styling */
    .form-actions {
        text-align: center;
        margin-top: 20px;
    }

    .btn.btn-primary {
        background: linear-gradient(135deg, #00d8ff, #0066ff);
        color: #fff;
        border: none;
        border-radius: 5px;
        padding: 10px 20px;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 2px 15px rgba(0, 255, 255, 0.4);
    }

        .btn.btn-primary:hover {
            background: linear-gradient(135deg, #66ffcc, #33ccff);
            box-shadow: 0 4px 20px rgba(51, 204, 255, 0.6);
            transform: scale(1.05);
        }

        .btn.btn-primary:active {
            transform: scale(0.8);
        }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        background: #1e2a39;
        color: #fff;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
    }

    th, td {
        padding: 12px 15px;
        border: 1px solid #2e3c4e;
        text-align: left;
    }

    th {
        background: #00d8ff;
        color: #000;
    }

    tbody tr:hover {
        background: rgba(0, 216, 255, 0.1);
    }
</style>