@page "/"

@*@inject DatabaseSchemaService SchemaService*@
@inject RuntimeScaffoldService rss

<h3>Database Schema Viewer</h3>

<div>
    <label for="connectionString">Connection String Parameter:</label>
    @*<input id="connectionString" @bind="ConnectionString" style="width: 100%;" />*@
    <input id="Server" @bind="Server" />
    <input id="Database" @bind="Database"  />
    <input id="Trusted_Connection" @bind="Trusted_Connection" />
    <input id="MultipleActiveResultSets" @bind="MultipleActiveResultSets" />
    
    <button class="btn btn-primary" @onclick="LoadSchema">Load Schema</button>
</div>

@if (IsLoading)
{
    <p>Loading...</p>
}
else if (!IsLoading)
{
    <div>
        <p>Finished.</p>
        <h4>Database Tables</h4>
        @foreach (var table in Tables)
        {
            <div>
                <h5>@table</h5>
                @*<table border="1">
                    <thead>
                        <tr>
                            <th>Column Name</th>
                            <th>Data Type</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var column in table.Columns)
                        {
                            <tr>
                                <td>@column.ColumnName</td>
                                <td>@column.DataType</td>
                            </tr>
                        }
                    </tbody>
                </table>*@
            </div>
        }
    </div>
}
else if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p style="color: red;">@ErrorMessage</p>
}

@code {
    private string ConnectionString { get; set; }
    private List<string> Tables { get; set; } = new();
    private string ErrorMessage { get; set; } = "";
    private bool IsLoading { get; set; } = false;
    private string Server { get; set; } = "(localdb)\\mssqllocaldb";
    private string Database { get; set; } = "MachineLearningMachine3000";
    private string Trusted_Connection { get; set; } = "True";
    private string MultipleActiveResultSets { get; set; } = "True";
    

    private async Task LoadSchema()
    {
        IsLoading = true;
        ErrorMessage = "";
        Tables.Clear();

        ConnectionString = string.Format($"Server={Server};Database={Database};Trusted_Connection={Trusted_Connection};MultipleActiveResultSets={MultipleActiveResultSets}");

        try
        {

           Tables = rss.GetZeData(ConnectionString);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to load schema: {ex.Message}";
        }


        IsLoading = false;
    }
}