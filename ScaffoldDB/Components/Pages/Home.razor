@page "/"

@inject RuntimeScaffoldService rss
@inject DynamicTableServiceFactory TableServiceFactory

    <link href="css/Home.css" rel="stylesheet">

@if (getTableDataSuccess == false)
{


    @if (page1 == true && !IsLoading)
    {
        <div class="form-container col-6">
            <h4>Datenbank Verbindung</h4>

            <div class="form-group">
                <label for="Server">Server:</label>
                <input id="Server" @bind="Server" type="text" placeholder="Enter server name" />
            </div>
            <div class="form-group">
                <label for="Database">Datenbank:</label>
                <input id="Database" @bind="Database" type="text" placeholder="Enter database name" />
            </div>
            <div class="form-group">
                <label for="SQLLogin">SQL-Login</label>
                <input id="SQLLogin" @bind="SQLLogin" type="checkbox" />
            </div>
            @if (SQLLogin)
            {
                <div class="form-group">
                    <label for="login">Login:</label>
                    <input id="login" @bind="login" type="text" placeholder="Enter Login name" />
                </div>
                <div class="form-group">
                    <label for="Password">Passwort:</label>
                    <input id="Password" @bind="password" type="text" placeholder="Enter Password" />
                </div>
            }
            <div class="form-group">
                <label for="Trusted_Connection">Trusted Connection:</label>
                <input id="Trusted_Connection" @bind="Trusted_Connection" type="checkbox" />
            </div>
            <div class="form-group">
                <label for="MultipleActiveResultSets">Multiple Active Result Sets:</label>
                <input id="MultipleActiveResultSets" @bind="MultipleActiveResultSets" type="checkbox" />
            </div>
            <div class="form-actions">
                <button class="btn btn-primary" @onclick="LoadSchema">Lade Datenbank Information</button>
            </div>

        </div>
    }
    


        @if (IsLoading)
        {
            <p>Loading...</p>
        }
        else if (!IsLoading && schemaTableInfosUI.Any() && page2 == true)
        {
            <div class="form-container col-6">
                <div class="row">
                    <h4>Tabellenübersicht</h4>
                    @foreach (var info in schemaTableInfosUI)
                    {
                        <div>

                            <table>
                                <thead>
                                    <tr>
                                        <th>Schema</th>
                                        <th>Table</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var tableName in info.TableNames)
                                    {
                                        <tr>
                                            <td>@info.SchemaName</td>
                                            <td>@tableName</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
                <div class="row-cols-4" style="margin-top:20px;">
                    <select @bind="SelectedItem" class="form-select">
                        <option value="">-- Tabelle auswählen --</option>
                        @foreach (var tableInfo in schemaTableInfosUI)
                        {
                            @foreach (var tableName in tableInfo.TableNames)
                            {


                                <option value="@tableName">@tableName</option>

                            }

                        }
                    </select>
                </div>
                <div class="row-cols-1">
                    <button class="btn btn-primary mt-3" @onclick="() => Bearbeiten(SelectedItem)" disabled="@(string.IsNullOrEmpty(SelectedItem))">
                        Bearbeiten
                    </button>
                </div>

            </div>
        }
    
    <div class="row">
        @if (!string.IsNullOrEmpty(ErrorMessage) && !ErrorMessage.Contains("Success"))
        {
            <div class="form-container">
                <p style="color: red;">@ErrorMessage</p>
            </div>

        }
        else if (!string.IsNullOrEmpty(ErrorMessage) && ErrorMessage.Contains("Success"))
        {
            <div class="form-container">
                <p style="color: green;">@ErrorMessage</p>
            </div>

        }
    </div>
}
@if (getTableDataSuccess)
{


    <div class="form-container" style="width:100%;max-width:100%;">


        <h4>Tabelle: @tableInfo.TableName</h4>
        <hr />
        @if (!Hinzufuegen)
        {
            <div class="row">
                <div class="col-auto">
                    <button class="btn btn-primary" @onclick="() => Add()">Zeile hinzufügen</button>
                </div>
                @*<div class="col-8">

                </div>*@
                <div class="col-auto">
                    <button class="btn btn-primary" @onclick="() => Zurueck()">Zurück zur Tabellenauswahl</button>
                </div>
            </div>

        }
        else if (Hinzufuegen)
        {
            <div class="row">
                <table style="border-radius: 5px;">

                    <tbody style="border-radius: 5px;">
                        <tr>
                            @for (int i = 0; i < tableInfo.ColumnNames.Count; i++)
                            {
                                var localVariable = i;
                                if (localVariable == 0)
                                {
                                    <td>
                                        <label for="@tableInfo.ColumnNames[localVariable]">@tableInfo.ColumnNames[localVariable]</label>
                                        <input disabled />
                                    </td>
                                }
                                else if (localVariable > 0)
                                {
                                    <td>
                                        <label for="@tableInfo.ColumnNames[localVariable]">@tableInfo.ColumnNames[localVariable]</label>
                                        <input @bind="@InputData[localVariable]" id="@tableInfo.ColumnNames[localVariable]" />
                                    </td>
                                }


                            }
                        </tr>

                    </tbody>
                </table>

            </div>

            <div class="row" style="margin-top:10px;">
                <div class="col-2">
                    <button class="btn btn-primary" @onclick="() => CallFunctionWithData()">Daten hinzufügen</button>

                </div>
                <div class="col-7">
                </div>

                <div class="col-3">
                    <button class="btn btn-primary" @onclick="() => Zurueck()">Zurück zur Tabellenauswahl</button>

                </div>
            </div>

        }
        <hr />
        @if (MoreRows)
        {
            <div>

            </div>
            <div class="row align-items-center" style="gap: 5px;">
                <div class="col-auto">
                    @if (Page != 0 && Page > 0)
                    {
                        <button class="btn btn-primary btn-sm" @onclick="LoadZurueck" disabled="@isLoadingData"><code>&lt;</code></button>

                    }
                </div>
                <div class="col-auto">
                    <label class="form-label mb-0" for="offsetRange">Seite: @Page von @maxPageCount</label>
                </div>


                <div class="col-auto">
                    <input class="form-control form-control-sm" type="number" id="offsetRange" min="0" max="@maxPageCount" step="1" @bind="Page" />
                </div>
                <div class="col-auto">
                    <button class="btn btn-primary btn-sm" @onclick="LoadMore" disabled="@isLoadingData">Seite laden</button>
                </div>
                <div class="col-auto">
                    <button class="btn btn-primary btn-sm" @onclick="LoadVor" disabled="@isLoadingData"><code>&gt;</code></button>
                </div>
                @*<div class="col-6">
                </div>*@
            </div>

            <hr />



        }
        <table style="height: 400px; overflow-y: auto;">
            <thead>
                <tr>
                    @foreach (var column in tableInfo.ColumnNames)
                    {
                        <th>@column</th>
                    }
                    <th> Zeile löschen</th>
                    <th> Zeile bearbeiten</th>
                </tr>

            </thead>
            <tbody>
                @foreach (var row in tableInfo.Rows)
                {
                    <tr>
                        @foreach (var cell in row)
                        {
                            <td>@cell</td>
                        }
                        <td><button class="btn btn-danger" @onclick="() => DeleteRow(row.First().ToString())">Löschen</button></td>
                        <td><button class="btn btn-warning">Bearbeiten</button></td>
                    </tr>
                }
            </tbody>
        </table>
        @if (MoreRows)
        {
            <hr />
            <div>

            </div>
            <div class="row align-items-center" style="gap: 5px;">
                <div class="col-auto">
                    @if (Page != 0 && Page > 0)
                    {
                        <button class="btn btn-primary btn-sm" @onclick="LoadZurueck" disabled="@isLoadingData"><code>&lt;</code></button>

                    }
                </div>
                <div class="col-auto">
                    <label class="form-label mb-0" for="offsetRange">Seite: @Page von @maxPageCount</label>
                </div>


                <div class="col-auto">
                    <input class="form-control form-control-sm" style="width: 50px;" type="number" id="offsetRange" min="0" max="@maxPageCount" step="1" @bind="Page" />
                </div>
                <div class="col-auto">
                    <button class="btn btn-primary btn-sm" @onclick="LoadMore" disabled="@isLoadingData">Seite laden</button>
                </div>
                <div class="col-auto">
                    <button class="btn btn-primary btn-sm" @onclick="LoadVor" disabled="@isLoadingData"><code>&gt;</code></button>
                </div>
                @*<div class="col-6">
                </div>*@
            </div>

            <hr />



        }


    </div>
}



@code {
    private string ConnectionString { get; set; }
    private string ConnectionStringLogin { get; set; }
    private List<string> Tables { get; set; } = new();
    List<SchemaTableInfo> schemaTableInfosUI = new List<SchemaTableInfo>();
    private string ErrorMessage { get; set; } = "";
    private bool IsLoading { get; set; } = false;
    private bool MigrationDeleted { get; set; } = false;
    private bool getTableDataSuccess { get; set; } = false;
    private bool MoreRows { get; set; } = false;
    private string SelectedItem { get; set; } = "";
    private bool Hinzufuegen { get; set; } = false;

    private string Server { get; set; } = "localhost";
    private string Database { get; set; } = "StackOverflow2013";
    private string login { get; set; } = "TestSQLLogin";
    private string password { get; set; } = "TestKennwort123";
    private bool SQLLogin { get; set; } = true;
    private string Trusted_Connection { get; set; } = "True";
    private string MultipleActiveResultSets { get; set; } = "True";

    private bool page1 { get; set; } = true;
    private bool page2 { get; set; } = false;
    private bool page3 { get; set; } = false;
    private bool page4 { get; set; } = false;

    private int maxPageCount = 0;

    private int Page = 0; // Current page number
    private int Offset => Page * Limit; // Calculate offset based on the page
    private int Limit = 100; // Number of rows per page
    private bool isInvalid = false;
    private bool isLoadingData = false;

    //private List<string> InputData;
    private string[] InputData;
    private Dictionary<string, object> InputDataDict = new Dictionary<string, object>();

    private List<int> Numbers { get; set; }
    private int SelectedNumber { get; set; }

    TableData tableInfo = new TableData();
    TableData tableInfoDisplay = new TableData();





    private async Task LoadSchema()
    {
        IsLoading = true;
        ErrorMessage = "";
        Tables.Clear();

        ConnectionString = string.Format($"Server={Server};Database={Database};TrustServerCertificate=true;Trusted_Connection={Trusted_Connection};MultipleActiveResultSets={MultipleActiveResultSets}");
        if (SQLLogin)
        {
            ConnectionString = string.Format($"Server={Server};Database={Database};User Id={login};Password={password};TrustServerCertificate=true;Trusted_Connection={Trusted_Connection};MultipleActiveResultSets={MultipleActiveResultSets}");
        }


        try
        {
            schemaTableInfosUI = rss.GetZeData(ConnectionString, Database);
            if (!schemaTableInfosUI.Any())
            {
                ErrorMessage = "Scaffolding Failed! Connectionstring incorrect.";
            }

        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to load schema: {ex.Message}";
        }

        MigrationDeleted = false;
        IsLoading = false;
        page1 = false;
        page2 = true;
    }


    private async Task DeleteMigrationFiles()
    {
        string appDataLocal = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);

        string tempDirectory = Path.Combine(appDataLocal, "Migrations");
        if (Directory.Exists(tempDirectory))
        {
            foreach (var file in Directory.GetFiles(tempDirectory))
            {
                File.Delete(file);
            }

            foreach (var subDir in Directory.GetDirectories(tempDirectory))
            {
                Directory.Delete(subDir, true);
            }
        }

        MigrationDeleted = true;
    }

    private async Task Bearbeiten(string tableName)
    {


        try
        {
            tableInfo = await rss.GetZeTable(ConnectionString, tableName);

            maxPageCount = tableInfo.RowCount / 100;
            //Numbers = Enumerable.Range(1, maxPageCount).ToList();

            getTableDataSuccess = true;
            if (tableInfo.Rows.Count() >= 50)
            {
                MoreRows = true;
            }
        }
        catch (Exception e)
        {
            int i = 0;

        }
        Hinzufuegen = false;

    }

    private async Task LoadMore()
    {
        if (isLoadingData) return;

        isLoadingData = true;

        try
        {
            tableInfo.TableName = String.Empty;
            tableInfo.Rows.Clear();
            tableInfo.ColumnNames.Clear();

            tableInfo = await rss.GetZeTable(ConnectionString, SelectedItem, Offset, Limit);

            //if (tableInfo != null && tableInfo.Rows.Any())
            //{
            //    tableInfo.Rows.AddRange(tableInfo.Rows);

            //}
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }

        isLoadingData = false;
        Hinzufuegen = false;
    }

    private async Task LoadVor()
    {
        if (isLoadingData) return;

        isLoadingData = true;

        Page = Page + 1;

        try
        {


            tableInfo = await rss.GetZeTable(ConnectionString, SelectedItem, Offset, Limit);

            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }

        isLoadingData = false;
        Hinzufuegen = false;
    }

    private async Task LoadZurueck()
    {
        if (isLoadingData) return;

        isLoadingData = true;

        Page = Page - 1;
        try
        {


            tableInfo = await rss.GetZeTable(ConnectionString, SelectedItem, Offset, Limit);


        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }

        isLoadingData = false;
        Hinzufuegen = false;
    }

    private void Zurueck()
    {
        getTableDataSuccess = false;
    }

    private async Task DeleteRow(string stringId)
    {

        var service = TableServiceFactory.Create(ConnectionString);


        if (stringId == null) return;

        int id = int.Parse(stringId);
        await service.DeleteAsync(tableInfo.TableName, id);
        await LoadMore();
    }

    private async Task Add()
    {
        //InputData = new List<string>(new string[tableInfo.ColumnNames.Count]);
        InputData = new string[tableInfo.ColumnNames.Count];
        Hinzufuegen = true;
    }

    private async Task CallFunctionWithData()
    {
        InputDataDict = tableInfo.ColumnNames.Skip(1)
       .Zip(InputData.Skip(1), (columnName, value) => new { columnName, value })
       .ToDictionary(x => x.columnName, x => (object)x.value);

        await ProcessData(InputDataDict);
    }

    private async Task ProcessData(Dictionary<string, object> data)
    {
        var service = TableServiceFactory.Create(ConnectionString);

        await service.InsertAsync(tableInfo.TableName, data);
        Page = maxPageCount;
        await LoadMore();

    }
    //private bool IsIdentityColumn(string columnName)
    //{
    //    // Logic to determine if the column is an identity column
    //    return tableInfo.IdentityColumns.Contains(columnName);
    //}
}
