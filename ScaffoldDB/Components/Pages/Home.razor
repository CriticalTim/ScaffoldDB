@page "/"
@*@inject DatabaseSchemaService SchemaService*@
@inject RuntimeScaffoldService rss
@inject DynamicTableServiceFactory TableServiceFactory

<h3 style="position:center;">Database Manipulator</h3>


@if (getTableDataSuccess == false)
{



    <div class="row">
        <div class="form-container col-6">
            <h4>Connection Settings</h4>

            <div class="form-group">
                <label for="Server">Server:</label>
                <input id="Server" @bind="Server" type="text" placeholder="Enter server name" />
            </div>
            <div class="form-group">
                <label for="Database">Database:</label>
                <input id="Database" @bind="Database" type="text" placeholder="Enter database name" />
            </div>
            <div class="form-group">
                <label for="SQLLogin">SQL-Login</label>
                <input id="SQLLogin" @bind="SQLLogin" type="checkbox" />
            </div>
            @if (SQLLogin)
            {
                <div class="form-group">
                    <label for="login">Login:</label>
                    <input id="login" @bind="login" type="text" placeholder="Enter Login name" />
                </div>
                <div class="form-group">
                    <label for="Password">Password:</label>
                    <input id="Password" @bind="password" type="text" placeholder="Enter Password" />
                </div>
            }
            <div class="form-group">
                <label for="Trusted_Connection">Trusted Connection:</label>
                <input id="Trusted_Connection" @bind="Trusted_Connection" type="checkbox" />
            </div>
            <div class="form-group">
                <label for="MultipleActiveResultSets">Multiple Active Result Sets:</label>
                <input id="MultipleActiveResultSets" @bind="MultipleActiveResultSets" type="checkbox" />
            </div>
            <div class="form-actions">
                <button class="btn btn-primary" @onclick="LoadSchema">Load Database Information</button>
            </div>

        </div>

        @if (IsLoading)
        {
            <p>Loading...</p>
        }
        else if (!IsLoading && schemaTableInfosUI.Any())
        {
            <div class="form-container col-6">
                <div class="row">
                    <h4>Tabellenübersicht</h4>
                    @foreach (var info in schemaTableInfosUI)
                    {
                        <div>

                            <table border="1">
                                <thead>
                                    <tr>
                                        <th>Schema</th>
                                        <th>Table</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var tableName in info.TableNames)
                                    {
                                        <tr>
                                            <td>@info.SchemaName</td>
                                            <td>@tableName</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
                <div class="row">
                    <select @bind="SelectedItem" class="form-select">
                        <option value="">-- Wählen Sie eine Tabelle zum Bearbeiten aus --</option>
                        @foreach (var tableInfo in schemaTableInfosUI)
                        {
                            @foreach (var tableName in tableInfo.TableNames)
                            {


                                <option value="@tableName">@tableName</option>

                            }

                        }
                    </select>
                </div>
                <div class="row-cols-1">
                    <!-- Button to Trigger Function -->
                    <button class="btn btn-primary mt-3" @onclick="() => Bearbeiten(SelectedItem)" disabled="@(string.IsNullOrEmpty(SelectedItem))">
                        Bearbeiten
                    </button>
                </div>

            </div>
        }
    </div>
    <div class="row">
        @if (!string.IsNullOrEmpty(ErrorMessage) && !ErrorMessage.Contains("Success"))
        {
            <div class="form-container">
                <p style="color: red;">@ErrorMessage</p>
            </div>

        }
        else if (!string.IsNullOrEmpty(ErrorMessage) && ErrorMessage.Contains("Success"))
        {
            <div class="form-container">
                <p style="color: green;">@ErrorMessage</p>
            </div>

        }
    </div>
}
@if (getTableDataSuccess)
{


    <div class="form-container" style="width:100%;max-width:100%;">
        @if (MoreRows)
        {
            <div>
                <label for="offsetRange">Seite:</label>
                <input type="range" id="offsetRange" min="0" max="150" step="1" @bind="Page" />
                <span>Page: @Page (Offset: @Offset, Limit: @Limit)</span>
            </div>

            <button class="btn btn-primary" @onclick="LoadMore" disabled="@isLoadingData">Seite laden</button>
        }

        <h4>Table: @tableInfo.TableName</h4>
        <hr />
        <button class="btn btn-primary">Zeile hinzufügen</button>
        <hr />
        <table style="height: 400px; overflow-y: auto;">
            <thead>
                <tr>
                    @foreach (var column in tableInfo.ColumnNames)
                    {
                        <th>@column</th>
                    }
                    <th> Zeile löschen</th>
                    <th> Zeile bearbeiten</th>
                </tr>

            </thead>
            <tbody>
                @foreach (var row in tableInfo.Rows)
                {
                    <tr>
                        @foreach (var cell in row)
                        {
                            <td>@cell</td>
                        }
                        <td><button class="btn btn-danger" @onclick="() => DeleteRow(row.First().ToString())">Löschen</button></td>
                        <td><button class="btn btn-warning">Bearbeiten</button></td>
                    </tr>
                }
            </tbody>
        </table>

        <button class="btn btn-primary mt-3" @onclick="() => Zurueck()">Zurück</button>

    </div>
}



@code {
    private string ConnectionString { get; set; }
    private string ConnectionStringLogin { get; set; }
    private List<string> Tables { get; set; } = new();
    List<SchemaTableInfo> schemaTableInfosUI = new List<SchemaTableInfo>();
    private string ErrorMessage { get; set; } = "";
    private bool IsLoading { get; set; } = false;
    private bool MigrationDeleted { get; set; } = false;
    private bool getTableDataSuccess { get; set; } = false;
    private bool MoreRows { get; set; } = false;
    private string SelectedItem { get; set; } = "";


    private string Server { get; set; } = "localhost";
    private string Database { get; set; } = "StackOverflow2013";
    private string login { get; set; } = "TestSQLLogin";
    private string password { get; set; } = "TestKennwort123";
    private bool SQLLogin { get; set; } = true;
    private string Trusted_Connection { get; set; } = "True";
    private string MultipleActiveResultSets { get; set; } = "True";


    private int Page = 0; // Current page number
    private int Offset => Page * Limit; // Calculate offset based on the page
    private int Limit = 100; // Number of rows per page
    private bool isInvalid = false;
    private bool isLoadingData = false;


    TableData tableInfo = new TableData();
    TableData tableInfoDisplay = new TableData();

    private async Task LoadSchema()
    {
        IsLoading = true;
        ErrorMessage = "";
        Tables.Clear();

        ConnectionString = string.Format($"Server={Server};Database={Database};TrustServerCertificate=true;Trusted_Connection={Trusted_Connection};MultipleActiveResultSets={MultipleActiveResultSets}");
        if (SQLLogin)
        {
            ConnectionString = string.Format($"Server={Server};Database={Database};User Id={login};Password={password};TrustServerCertificate=true;Trusted_Connection={Trusted_Connection};MultipleActiveResultSets={MultipleActiveResultSets}");
        }


        try
        {
            schemaTableInfosUI = rss.GetZeData(ConnectionString, Database);
            if (!schemaTableInfosUI.Any())
            {
                ErrorMessage = "Scaffolding Failed! Connectionstring incorrect.";
            }

        }
        catch (Exception ex)
        {
            ErrorMessage = $"Failed to load schema: {ex.Message}";
        }

        MigrationDeleted = false;
        IsLoading = false;
    }


    private async Task DeleteMigrationFiles()
    {
        string appDataLocal = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);

        string tempDirectory = Path.Combine(appDataLocal, "Migrations");
        if (Directory.Exists(tempDirectory))
        {
            foreach (var file in Directory.GetFiles(tempDirectory))
            {
                File.Delete(file);
            }

            foreach (var subDir in Directory.GetDirectories(tempDirectory))
            {
                Directory.Delete(subDir, true);
            }
        }

        MigrationDeleted = true;
    }

    private async Task Bearbeiten(string tableName)
    {
        try
        {
            tableInfo = await rss.GetZeTable(ConnectionString, tableName);
            //tableInfoDisplay = tableInfo;
            getTableDataSuccess = true;
            if (tableInfo.Rows.Count() >= 50)
            {
                MoreRows = true;
            }
        }
        catch (Exception e)
        {
            int i = 0;

        }


    }

    private async Task LoadMore()
    {
        if (isLoadingData) return;

        isLoadingData = true;

        try
        {

            // Fetch rows using the service
            tableInfo = await rss.GetZeTable(ConnectionString, SelectedItem, Offset, Limit);
            //var newRows = await DataService.GetRowsAsync("YourTable", offset, limit);
            if (tableInfo != null && tableInfo.Rows.Any())
            {
                tableInfo.Rows.AddRange(tableInfo.Rows);

            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
        }

        isLoadingData = false;
    }

    private void Zurueck()
    {
        getTableDataSuccess = false;
    }

    private async Task DeleteRow(string stringId)
    {

        var service = TableServiceFactory.Create(ConnectionString);


        if (stringId == null) return;

        int id = int.Parse(stringId);
        await service.DeleteAsync(tableInfo.TableName, id);
    }

}
<style>
    /* Form Container Styling */
    .form-container {
        padding: 20px;
        max-width: 500px;
        margin: 0 auto;
        background: #1e2a39;
        border-radius: 10px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
        margin-bottom: 2vh;
        color: #fff;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

        .form-container h4 {
            color: #00d8ff;
            margin-bottom: 20px;
            text-align: center;
        }

    /* Form Group Styling */
    .form-group {
        margin-bottom: 15px;
    }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

        .form-group input[type="text"] {
            width: 100%;
            padding: 10px;
            border: 1px solid #00d8ff;
            border-radius: 5px;
            background: #1e2a39;
            color: #fff;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            transition: border-color 0.3s, box-shadow 0.3s;
        }

            .form-group input[type="text"]:focus {
                outline: none;
                border-color: #66ffcc;
                box-shadow: 0 0 10px #66ffcc;
            }

        .form-group input[type="checkbox"] {
            transform: scale(1.2);
            margin-right: 10px;
        }

    /* Form Actions Styling */
    .form-actions {
        text-align: center;
        margin-top: 20px;
    }

    .btn.btn-primary {
        background: linear-gradient(135deg, #00d8ff, #0066ff);
        color: #fff;
        border: none;
        border-radius: 5px;
        padding: 10px 20px;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 2px 15px rgba(0, 255, 255, 0.4);
    }

        .btn.btn-primary:hover {
            background: linear-gradient(135deg, #66ffcc, #33ccff);
            box-shadow: 0 4px 20px rgba(51, 204, 255, 0.6);
            transform: scale(1.05);
        }

        .btn.btn-primary:active {
            transform: scale(0.8);
        }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        background: #1e2a39;
        color: #fff;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
    }

    th, td {
        padding: 12px 15px;
        border: 1px solid #2e3c4e;
        text-align: left;
    }

    th {
        background: #00d8ff;
        color: #000;
    }

    tbody tr:hover {
        background: rgba(0, 216, 255, 0.1);
    }
</style>
